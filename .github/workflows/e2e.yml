name: run-e2e
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  run-e2e-job:
    name: run-e2e-job
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2          
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.17'
      - name: install-dependencies
        run: |
          go install sigs.k8s.io/kind@v0.17.0 

          curl -LO https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl

          HELM_PKG="helm-v3.10.3-linux-amd64.tar.gz"
          curl -LO https://get.helm.sh/"${HELM_PKG}"
          tar -zxvf "${HELM_PKG}"
          mv ./linux-amd64/helm .
          echo $(pwd)
          echo "$(pwd)" >> $GITHUB_PATH
      - name: check-dependencies
        run: |
          echo "$PATH"
          go version
          kind version
          kubectl version --short --client=true
          helm version
      - name: setup-k8s-cluster
        run: |
          # Currently, otherwise kubectl is unlealthy... 
          # Probably I screwed the rootless docker installation
          kind create cluster \
          --image=kindest/node:v1.21.14@sha256:9d9eb5fb26b4fbc0c6d95fa8c790414f9750dd583f5d7cee45d92e8c26670aa1 \
          --config=./e2e/kind-cluster-config.yaml \
          --wait 5m
          kubectl wait --for=condition=ready node -l worker=true
      - name: build-and-load-operator-image
        uses: docker/build-push-action@v3
        with:
          push: false
          # Get commit short sha within Github action workflow
          # Just a random string name, we aren't uploading anyway
          tags: ydb-operator:current
      - name: deploy-operator
        run: |
          kind load docker-image ydb-operator:current
          helm -n ydb-operator install --create-namespace ydb-operator ./deploy/ydb-operator \
          -f ./e2e/operator-values.yaml \
          --set image.repository=ydb-operator \
          --set image.tag=current \
          --set image.imagePullPolicy=Never # This is not a mistake, the image should already be loaded into kind
          OPERATOR_POD_NAME=$(kubectl get pods -n ydb-operator |  awk '{if ($1 ~ "ydb-operator") print $1}')
          kubectl wait --for=condition=ready pod -n ydb-operator "$OPERATOR_POD_NAME"
      - name: pull-and-load-ydb-image
        run: |
          # TODO would be cool to parse YDB image from manifests to avoid duplicating information
          docker pull cr.yandex/crptqonuodf51kdj7a7d/ydb:22.4.44
          kind load docker-image cr.yandex/crptqonuodf51kdj7a7d/ydb:22.4.44
      - name: run-tests
        run: |
          # TODO NOW, THIS COULD BE FULLY REPLACED WITH TESTS IN GOLANG! I WAIT FOR DATABASE PODS AS AN EXAMPLE ONLY!
          # REAL TESTS WILL BE WRITTEN IN GOLANG AND WILL USE THE INFRASTRUCTURE CREATED ABOVE!
          kubectl create namespace ydb

          kubectl apply -f ./e2e/manifests/storage.yaml
          # TODO namespace and labels are hardcoded in the next command, that is duplication.
          # We should get the label and its value from ./e2e/manifests/*.yaml
          kubectl wait --timeout=5m --for=condition=ready storage -n ydb ycydb
          kubectl wait --timeout=5m --for=condition=ready pod -n ydb -l ydb-cluster=kind-storage

          kubectl apply -f ./e2e/manifests/database.yaml
          kubectl wait --timeout=5m --for=condition=ready database -n ydb database
          kubectl wait --timeout=5m --for=condition=ready pod -n ydb -l ydb-cluster=kind-database
      - name: teardown-k8s-cluster
        run: |
          kind delete cluster
